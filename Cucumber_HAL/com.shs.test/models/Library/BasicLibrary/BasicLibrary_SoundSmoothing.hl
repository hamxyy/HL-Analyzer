/*----------------------------------------------------------------------------------------------------------------
//                  BASIC FUNCTION LIBRARY  :  Sound Smoothing
// Initial Version                                         :  2011-02-11   Cecil Wilson
// Modified the Package name to proper naming convention   :  2011-02-14   Cecil Wilson
// Modified the Strength of slider switch case to 10,20,30 :  2011-02-15   Cecil Wilson
// Removed the SpeechnNoise_Mgmt function from the file    :  2011-02-16   Cecil Wilson
// Renamed Library name due to conflicts in HAL            :  2011-02-21   Cecil Wilson
// Updated package name,comments and initial values 	   :  2011-02-24   Cecil Wilson
// Removed Package LIB workaround and added actual Hi Ctrls:  2011-03-02   Cecil Wilson
// Updated formating and added return values			   :  2011-04-26   Cecil Wilson
// Add println for easy debugging						   :  2011-09-06   Chuah LayYuan
// Updated SoundSmoothingEn_Get to return remapped_pos.	   :  2011-12-09   Jenny Lin
// Updated min, med, max settings based on email from Eva and Sebastian:  2012-05-02 Frauke Schall
// Peer review changes															: 2012-06-13 Nadine and Frauke
// *********************************************CODE FREEZE*******************************************************
// Added assertion message									: 2012-12-18 Jenny Lin
// Sifit 7.2 Peer Review										: 2013-07-31 Raymond
// Added new function for SIFIT 7.3							: 2013-11-13	Mang Yew
// update on setpos to remove unused return argument							: 2014-03-04 Mang Yew
// Update for Sifit 7.3 Peer Review							: 2014-04-22	Mang Yew
// Peer Review of Changes during 7.4  - no changes   			                                :2014-12-10 Alastair,Judith
//--------------------------------------------------------------------------------------------------------------*/

namespace shs_sat {
	using builtins.*;
	using shs_sat.*;

	package  Lib BasicLibrary_SoundSmoothing{	   

/*$----------------------------------------------------------------------------------------------------------------
//   Basic LIBRARY Function:    SoundSmoothingSL_Set_Strength
//   Input      :  <int> 'HI Control value Set' identification number based on definitions in Basic functions
//   Output      :  none
//   Description:  Sets the Hearing instrument controls based on the selected slider step     
-----------------------------------------------------------------------------------------------------------------$*/   		
		public function void SoundSmoothingSL_Set_Strength(int pos){
		
			int retval = pos;
			switch (pos){
				case 2:{
					hi:d8MFinStart = 8;
				}
				case 1:{
					hi:d8MFinStart = 2;
				}			
				case 0:{
					hi:d8MFinStart = 1;
				}
				case 11:{ 
					println('[HAL]BLIB-SoundSmoothingSL_Set_Strength >> pos' + pos + '. m_fin_start not changed!');
				}		
				default:{ 
					// sifit 7.3 check for slider position that sets soundsmoothing to be off
					println('[HAL]BLIB-SoundSmoothingSL_Set_Strength >> ERROR: pos = ' + pos + ' is invalid! return -1');
					assertion(false, "[MacroError] Undefined state of SoundSmoothing Slider! 
									BasicLibrary_SoundSmoothing.SoundSmoothingSL_Set_Strength");
					
				}// default closes
			} // switch closes
			println("[HAL]BLIB-SoundSmoothingSL_Set_Strength, pos =  " + pos );	
			
		} // Closes  BasicLibrary_SoundSmoothing.SoundSmoothingSL_Set_Strength


/*$----------------------------------------------------------------------------------------------------------------
//   Basic LIBRARY Function:    SoundSmoothingSL_Get_Strength
//   Input      :  None
//   Output      :  <int> slider position based on hi-control
//   Description:  Compares the HI settings and returns the position
-----------------------------------------------------------------------------------------------------------------$*/ 
		public function int SoundSmoothingSL_Get_Strength(){
			if (hi:d8MFinStart == 8){
				// Check if the HI control values match with that of HiControl Value set of ID number = 70 / G
				println("[HAL]BLIB-SoundSmoothingSL_Get_Strength, pos =  2");
				return 2; 
			}		
			else if(hi:d8MFinStart == 2){
				// Check if the HI control values match with that of HiControl Value set of ID number = 30 / C 
				println("[HAL]BLIB-SoundSmoothingSL_Get_Strength, pos =  1");
				return 1; 
			}
	 		else if(hi:d8MFinStart == 1){
	 			// Check if the HI control values match with that of HiControl Value set of ID number = 10 / A
				println("[HAL]BLIB-SoundSmoothingSL_Get_Strength, pos =  0");
				return 0; 
			}
			else{
				println('[HAL]BLIB-SoundSmoothingSL_Get_Strength >> ERROR: pos = -1 is invalid!');
				assertion(false, "[MacroError] Undefined state of SoundSmoothing Slider! 
				BasicLibrary_SoundSmoothing.SoundSmoothingSL_Get_Strength");
				return -1;
			}// default closes 
		} // Closes	BasicLibrary_SoundSmoothing.SoundSmoothingSL_Get_Strength	
		
/*$----------------------------------------------------------------------------------------------------------------
//   BASIC LIBRARY Function:    SoundSmoothingEn_Set
//   Input      :  <int> Desired State of checkbox using the remapped_pos from the MLIB remapped_pos function.
//   Output      :  none
//   Description:  Sets the Sound Smoothing feature based on checkbox selection
-----------------------------------------------------------------------------------------------------------------$*/ 
		public function void SoundSmoothingEn_Set(int pos){ // REVIEWED 7.2
			println("[HAL]BLIB-SoundSmoothingEn_Set, pos = " + pos);
			if (pos==1){
				hi:d8PhlFineOn = d8PhlFineOn.on;
			}
			else{
				hi:d8PhlFineOn = d8PhlFineOn.off;
			}
	    } // closes BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set

/*$----------------------------------------------------------------------------------------------------------------
//   BASIC LIBRARY Function:    SoundSmoothingEn_Get
//   Input      :  none 
//   Output      :  <int> Desired State of checkbox
//   Description:  Checks the Sound Smoothing feature based on checkbox selection. 
-----------------------------------------------------------------------------------------------------------------$*/		
		public function int SoundSmoothingEn_Get(){
			if (hi:d8PhlFineOn == d8PhlFineOn.on){
				println("[HAL]BLIB-SoundSmoothingEn_Get, pos = 1");
				return 1;
			}
			else{
				println("[HAL]BLIB-SoundSmoothingEn_Get, pos = 0");
				return 0;
			}
		} // closes BasicLibrary_SoundSmoothing.SoundSmoothingEn_Get

//-------------------------------------------------Sifit 7.3-------------------------------------------------------
/*$----------------------------------------------------------------------------------------------------------------
//   Basic LIBRARY Function:    SoundSmoothingSL_Set_Strength_Sw
//   Input      :  <int> 'HI Control value Set' identification number based on definitions in Basic functions
//   Output      :  none
//   Description:  Sets the Hearing instrument SW controls based on the selected slider step     
-----------------------------------------------------------------------------------------------------------------$*/   		
		public function void SoundSmoothingSL_Set_Strength_Sw(int pos){
			
			switch (pos){
				case 2:{
					hi:d8SwMacroSsSlHp = 2;
				}
				case 1:{
					hi:d8SwMacroSsSlHp = 1;
				}			
				case 0:{
					hi:d8SwMacroSsSlHp = 0;
				}
				case 11:{
					//do nothing. Does not change SwMacro Position.
				}		
				default:{   // Does not make sense to CXX but for implementation CHECK
					println('[HAL]BLIB-SoundSmoothingSL_Set_Strength_Sw >> ERROR: invalid! pos ');
					assertion(false, "[MacroError] Undefined state of SoundSmoothing Slider! 
								BasicLibrary_SoundSmoothing.SoundSmoothingSL_Set_Strength_Sw");
				}// default closes
			} // switch remapped_pos closes
			
			println("[HAL]BLIB-SoundSmoothingSL_Set_Strength_Sw, pos =  " + pos);
		} // Closes  BasicLibrary_SoundSmoothing.SoundSmoothingSL_Set_Strength_Sw

/*$----------------------------------------------------------------------------------------------------------------
//   BASIC LIBRARY Function:    SoundSmoothingEn_Set_Sw
//   Input      :  <int> Desired State of checkbox using.
//   Output      :  none
//   Description:  Sets the Sound Smoothing SW variable based on checkbox selection.
-----------------------------------------------------------------------------------------------------------------$*/ 
		public function void SoundSmoothingEn_Set_Sw(int pos){
			
			if (pos==1){
				hi:d8SwMacroSsEnHp = d8SwMacroSsEnHp.on;
			}
			else{
				hi:d8SwMacroSsEnHp = d8SwMacroSsEnHp.off;
			}
			println("[HAL]BLIB-SoundSmoothingEn_Set_Sw, pos = " + pos);
	    } // closes BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set_Sw
	    
/*$----------------------------------------------------------------------------------------------------------------
//   Basic LIBRARY Function:    SoundSmoothingSL_Get_Strength_Sw
//   Input      :  None
//   Output      :  <int> slider Sw position based on hi-control
//   Description:  Compares the HI Sw settings and returns the position
-----------------------------------------------------------------------------------------------------------------$*/ 
		public function int SoundSmoothingSL_Get_Strength_Sw(){
			if (hi:d8SwMacroSsSlHp == 2){
				// Check if the HI control values match with that of HiControl Value set of ID number = 70 / G
				println("[HAL]BLIB-SoundSmoothingSL_Get_Strength_Sw, pos =  2");
				return 2;  
			}		
			else if(hi:d8SwMacroSsSlHp == 1){
				// Check if the HI control values match with that of HiControl Value set of ID number = 30 / C
				println("[HAL]BLIB-SoundSmoothingSL_Get_Strength_Sw, pos =  1"); 
				return 1; 
			}
	 		else if(hi:d8SwMacroSsSlHp == 0){
	 			// Check if the HI control values match with that of HiControl Value set of ID number = 10 / A
				println("[HAL]BLIB-SoundSmoothingSL_Get_Strength_Sw, pos =  0"); 
				return 0; 
			}
			else{
				println('[HAL]BLIB-SoundSmoothingSL_Get_Strength_Sw >> ERROR: pos = -1 is invalid!');
				assertion(false, "[MacroError] Undefined state of SoundSmoothing Slider! 
							BasicLibrary_SoundSmoothing.SoundSmoothingSL_Get_Strength_Sw");
				return -1;
			}// default closes 
		} // Closes	BasicLibrary_SoundSmoothing.SoundSmoothingSL_Get_Strength_Sw
		
	/*$----------------------------------------------------------------------------------------------------------------
//   BASIC LIBRARY Function:    SoundSmoothingEn_Get_Sw
//   Input      :  none 
//   Output      :  <int> Desired State of checkbox
//   Description:  Checks the Sound Smoothing SW state based on checkbox selection. 
-----------------------------------------------------------------------------------------------------------------$*/		
		public function int SoundSmoothingEn_Get_Sw(){
			if (hi:d8SwMacroSsEnHp == d8SwMacroSsEnHp.on){
				println("[HAL]BLIB-SoundSmoothingEn_Get_Sw, pos = 1 ");  
				return 1;
			}
			else{
				println("[HAL]BLIB-SoundSmoothingEn_Get_Sw, pos = 0");  
				return 0;
			}
		} // closes BasicLibrary_SoundSmoothing.SoundSmoothingEn_Get_Sw

/*----------------------------------------------------------------------------------------------------------------
// 								  END Of BASIC FUNCTION  LIBRARY  : Sound Smoothing   
-----------------------------------------------------------------------------------------------------------------*/			
	} //package BasicLibrary_SoundSmoothing
} //namespace shs.sat