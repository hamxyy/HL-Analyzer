/*---------------------------------------------------------------------------------------------------------------*
//                                 HIGH LEVEL LIBRARY EWindScreen 
// Initial Version                						     					:  2011-02-16 Meike Doose
// Renamed Library Package name					             					:  2011-02-21 Cecil Wilson
// Made Slider positions zero based						     					:  2011-02-24 Cecil Wilson
// Updated Function structure with single Remapping Funct    					:  2011-03-02 Meike Doose
// Removed Package LIB workaround & fixed bug in
// EWindScreenSL_Get :replaced while condition'<=' with '<'  					:  2011-03-03 Cecil Wilson
// Adjust function name Basic...Get_Strength and Basic...Set_Strength 			:  2011-03-14 Meike Doose
// Renamed(removed SL) and updated Default after First fit function 			:  2011-06-09 Cecil Wilson 
// Add EWindScreen_Set_ProgramSelection function			                    :  2011-09-13 Chuah LayYuan
// Updated Program selection ID													:  2011-11-09 Chuah LayYuan
// Updated Program Selection: Privacy eWindscreen settings						:  2011-11-14 Jenny Lin
// Checks the visibility of the control before setting.							:  2011-11-14 Jenny Lin
// Updated Setting for miniTekTelecoil Program									:  2011-11-14 Chuah LayYuan
// Remove visibility checks for PS. Already done at the start PS library.		:  2011-11-14 Jenny Lin
// Updated PS:Phone acoustically settings										:  2011-11-14 Cecil Wilson
// Updated PS:Outdoor/Sports settings   										:  2011-11-14 Ma Mie Mie Thein
// Updated PS:TV settings														:  2011-11-16 Nadia Neugeborn
// Added eWindScreenEn_Get & eWindScreenEn_Set, updated EWindScreen_Set_Default for after FirstFit to 
// set the sliders to med and checkbox to On. Updated Ps to call HLIB setpos	:  2012-04-11 Jenny Lin
// Fixed Ewindscreen Slider for Phone acoustically								:  2012-04-16 Cecil Wilson
// Updated EWindScreen_Set_Default() for FirstFit								:  2012-04-16 Nadia Neugeborn			
// Updated the Setpos to take care of DualOmni case								:  2012-05-02 Cecil Wilson
// Updated the eWindScreenEn_Set to check for both 70/90						:  2012-05-03 Cecil Wilson/Jenny
// eWindScreenEn_Set() chanced because of the microphone mode dual/single omni  :  2012-06-14 Judith/ Cecil
// Peer review changes															:  2012-06-15 Judith, Nadine and Frauke
// Updated based on peer review (ProgramSelection)								:  2012-06-27 Frauke, Jenny and co
// FirstFit peer review															:  2012-07-17 Nadia & Judith
// *********************************************CODE FREEZE*******************************************************
// Updated the omnidirectional to (remapped_pos >= 90)							:  2012-11-19 Jenny
// Updated library with SWINE implementation									:  2012-12-10 Mang Yew
// Peer review changes															:  2013-01-02 Mang Yew
 *********************************************CODE FREEZE For 7.1*******************************************************
// Update High_Level_Library_EWindScreen.EWindScreen_Set_ProgramSelection due to FR59453
// WNC will be set to universal when Telecoil and Induction Loop Program is selected    :  2013-05-14 Mang Yew 
// Partial implementation for CR61635 (Disable FBC and WNC if input mode is non-mic input)
// is commented out.															: 2012-05-16 Mang Yew
// Implementation for CR61635 (Disable FBC and WNC if input mode is non-mic input)      : 2012-05-27 Mang Yew
// ******SIFIT7.2_PEERREVIEWED >> Only reviewed EWindScreenEn_Set_For_Microphone 	: 2013-07-30 Jenny & Judith
// Update ID number in Set_ProgramSelection function									:	2013-10-29 Sonia Stasiak
// CR64439: FITU: EWindscreen on in background for Sirion when changing inputmode to mic. To check the visibility
// of EWindScreen before setting it to ON.					: 2013-12-18 Jenny
// Comment update for Program Selection													: 2014-03-18 Sonia
// ER64439: Added check for IsVisible of WNC in EWindScreenEn_Set_For_Microphone(), if WNC is not
// visible, set WNC OFF.															: 2014-03-26 Jenny
// Sifit7.3 Peer review																: 2014-04-15 Jenny, Judith
// PEER REVIEWED CXX7.3 FOR PROGRAM SELECTION							: 2014-05-07 Sonia, Mie Mie, Jenny
// Update comment on Set_Program Selection (added new Induction Loop (T) program)		: 2014-07-30 Sonia Stasiak
// Peer Review of Changes during 7.4     			                                :2014-12-09 Sonia,Judith
*/
/*----------------------------------------------------------------------------------------------------------------*/
namespace shs_sat
{
	using shs_sat.*;
	package Lib High_Level_Library_EWindScreen
	{

	/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    eWindScreenSL_Set
//   Input      :  <int> Slider position from Cxx
//   Ouput      :  <int> Actual slider position
//   Description:  set eWindScreen strength based on slider positions   
-----------------------------------------------------------------------------------------------------------------*/
		public function int eWindScreenSL_Set (int pos)
		{
		// Set the actual HI settings using basic library and Mid library functions	
			int pos_wrt_basic_fcn = Mid_Level_Library_EWindScreen.EWindScreenSL_Set_Remapped_Pos (pos);
			return BasicLibrary_EWindScreen.EWindScreenSL_Set_Strength (pos_wrt_basic_fcn);
		} // Closing High_Level_Library_EWindScreen.eWindScreenSL_Set

		/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    eWindScreenSL_Get
//   Input      :  None
//   Ouput      :  <int> Actual slider position with respect to Current Device 
//   Description:  BACKMAPING  Slider positions;   Reverse of Price point and Family resolving function.    
-----------------------------------------------------------------------------------------------------------------*/
		public function int EWindScreenSL_Get ()
		{
			int pos = -1;
			int a = -1;
			int max = 2;
			int pos_wrt_basic_fcn = BasicLibrary_EWindScreen.EWindScreenSL_Get_Strength ();
			while (a < max)
			{
				++ a;
				if (pos_wrt_basic_fcn == Mid_Level_Library_EWindScreen.EWindScreenSL_Set_Remapped_Pos (a))
				{
					pos = a;
					break;
				}
			}
			assertion (pos_wrt_basic_fcn >= 0, "[MacroError] Undefined state of EWindscreen slider!");
			return pos;
		} //Closing High_Level_Library_EWindScreen.EWindScreenSL_Get

		/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    eWindScreenEn_Set
//   Input      :  <int> checkbox position from Cxx
//   Ouput      :  <void>
//   Description:  calling BLIB to set the current position of eWindScreen checkbox based on capability (DirMicAvailable).
* 				   If originally in omniDirectional mode, reset to the appropriate mic mode
-----------------------------------------------------------------------------------------------------------------*/
		public function void eWindScreenEn_Set (int pos)
		{
			High_Level_Library_EWindScreen.eWindScreenEn_Set_Hw (pos);
			BasicLibrary_EWindScreen.EWindScreenEn_Set_EntrySw (pos);
		} // Closing High_Level_Library_EWindScreen.eWindScreenEn_Set				

		/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    eWindScreenEn_Set_Hw
//   Input      :  <int> checkbox position from Cxx
//   Ouput      :  <void>
//   Description:  calling BLIB to set the current position of eWindScreen checkbox based on capability (DirMicAvailable).
* 				   If originally in omniDirectional mode, reset to the appropriate mic mode
-----------------------------------------------------------------------------------------------------------------*/
		public function void eWindScreenEn_Set_Hw (int pos)
		{
			int pos_wrt_basic_fcn = Mid_Level_Library_EWindScreen.EWindScreenEn_Set_Remapped_Pos (pos);
			BasicLibrary_EWindScreen.EWindScreenEn_Set_Entry (pos_wrt_basic_fcn);
			// Find out the Microphone mode for current device
			if (BasicLibrary_Mic_Mode.Mic_Mode_Get_RadioButton_Entrie () >= 90)
			{
			// Yes this is a OmniDirection Radiobutton selection in the MPV/Cxx
			// Reset the Microphone Mode based on the lastest BEST Omnidirectional setting
				High_Level_Library_Mic_Mode.MicMode_Set_MPVPos_from_String ('Omni');
			}
		} // Closing High_Level_Library_EWindScreen.eWindScreenEn_Set_Hw		
		/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    eWindScreenEn_Get
//   Input      :  None
//   Ouput      :  <int> Actual checkbox position
//   Description:  calling BLIB to check the current position of checkbox    
-----------------------------------------------------------------------------------------------------------------*/
		public function int eWindScreenEn_Get ()
		{
			int retval = -1;
			if (BasicLibrary_EWindScreen.EWindScreenEn_Get_Entry () == true ||
					BasicLibrary_EWindScreen.EWindScreenEn_Get_EntrySw () == true)
			{
				retval = 1;
			}
			else
			{
				retval = 0;
			}
			return retval;
		} // Closing High_Level_Library_EWindScreen.eWindScreenEn_Get

		/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    EWindScreen_Set_Default
//   Input      :  none
//   Ouput      :  none
//   Description:  Sets the slider position and CheckBox to the default after FF position    
-----------------------------------------------------------------------------------------------------------------*/
		public function void EWindScreen_Set_Default ()
		{

		// Get the default checkbox position from Mid Level Library	
			int BoxPos = Mid_Level_Library_EWindScreen.EWindScreenEn_DefaultPos ();
			// Get the default slider position from Mid Level Library
			int SLpos = Mid_Level_Library_EWindScreen.EWindScreenSL_DefaultPos ();

			// Set Checkbox to ON (if not PP75)
			High_Level_Library_EWindScreen.eWindScreenEn_Set (BoxPos);
			// Set Slider to MED
			High_Level_Library_EWindScreen.eWindScreenSL_Set (SLpos);
		} // Closing High_Level_Library_EWindScreen.EWindScreen_Set_Default

		/*$---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    EWindScreenEn_Set_For_Microphone
//   Input      :  <int> none
//   Ouput      :  <int> none
//   Description:  Set WNC for Input Mode Mixed with Microphone.
-----------------------------------------------------------------------------------------------------------------$*/
		public function void EWindScreenEn_Set_For_Microphone (int WncPos) //SIFIT7.3PEERREVIEWED
		{
			if(Mid_Level_Library_EWindScreen.EWindScreenEn_IsVisible()){
				if (WncPos == 1 &&
						BasicLibrary_MicrophoneMix.MixMicrophoneEn_Get_Mode() == 0)
				{
				// if Input mode not microphone, set both WNC HW OFF and SW to ON.
					BasicLibrary_EWindScreen.EWindScreenEn_Set_EntrySw (1);
					High_Level_Library_EWindScreen.eWindScreenEn_Set_Hw (0);
				}
				else
				{
					High_Level_Library_EWindScreen.eWindScreenEn_Set (WncPos);
				}
			}
			else{
				High_Level_Library_EWindScreen.eWindScreenEn_Set_Hw (0);	//ER64439
			}
		} // High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone

	/*---------------------------------------------------------------------------------------------------------*
	//	HIGH LEVEL LIBRARY - EWindScreen_Set_ProgramSelection
	//	Input		:	<int> ID 
	//	Output		:	<void>
	//	Description	:	Function is setting eWind Screen for all listening situation. 
	//	ID			:   
	//				:	2 = Noisy Environment		7 = TV						12 = Tek/miniTek		20 = Phone T
	//				:	3 = Phone(Acoustically)		8 = Outdoor/Sport			13 = miniTek FM			21 = Induction Loop (T)		
	//				:	4 = Phone mT				9 = Privacy					14 = miniTek Telecoil
	//				:	5 = Bluetooth Phone			10 = Tinnitus				15 = Audio Input
	//				:	6 = Music					11 = Induction Loop (mT)	19 = Phone MT
	//	Comments	:	Variable int (ID) starts with ID 2, respectively to ID of each program.
	/*---------------------------------------------------------------------------------------------------------*/
		public function void EWindScreen_Set_ProgramSelection (int ID) //PEER REVIEWED CXX7.3
		{
			if (Mid_Level_Library_EWindScreen.EWindScreenEn_IsVisible ())
			{
				println ('[HAL]:HLIB EWindScreen_Set_ProgramSelection ID = ' + ID);
				
				switch (ID)
				{
					case 2:{ // Noisy Environment
					//  eWindScreen set to ON, slider (if available) set to MED
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (1);
						
						if (Mid_Level_Library_EWindScreen.EWindScreenSL_IsVisible ())
						{
							High_Level_Library_EWindScreen.eWindScreenSL_Set (1);
						}
					}
					case 3:{ // Phone (Acoustically)
					// eWindScreen set to ON, slider (if available) set to MED
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (1);

						if (Mid_Level_Library_EWindScreen.EWindScreenSL_IsVisible ())
						{
							High_Level_Library_EWindScreen.eWindScreenSL_Set (1);
						}
					}
					case 5:{ // Bluetooth Phone
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					case 6:{ // Music
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					case 7:{ // TV
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					case 8:{ // Outdoor Sport
					// eWindScreen set to ON, slider (if available) set to MAX
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (1);

						if (Mid_Level_Library_EWindScreen.EWindScreenSL_IsVisible ())
						{
							High_Level_Library_EWindScreen.eWindScreenSL_Set (2);
						}
					}
					case 9:{ // Privacy
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					case 12:{ // Tek/miniTek
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					case 13:{ // miniTek FM
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					case 14:{ // miniTek Telecoil
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					case 15:{ // Audio Input
					// eWindScreen set to OFF
						High_Level_Library_EWindScreen.EWindScreenEn_Set_For_Microphone (0);
					}
					default:{
					// For Program ID 4, 10, 11, 19, 20, 21 eWindScreen do nothing
					
					// For Program ID 10 (Tinnitus) and 11 (Induction Loop) settings changed to do nothing in SiFit 7.2
					// due to FR59453
					
					}
				} // closes switch (ID)
			} // closes if EWindScreen_IsVisible

		} // closes High_Level_Library_EWindScreen.EWindScreen_Set_ProgramSelection


		/*---------------------------------------------------------------------------------------------------------------*
// 								  END Of High Level LIBRARY EWindScreen    
-----------------------------------------------------------------------------------------------------------------*/
	} //package High_Level_Library_EWindScreen

} //namespace shs.sat