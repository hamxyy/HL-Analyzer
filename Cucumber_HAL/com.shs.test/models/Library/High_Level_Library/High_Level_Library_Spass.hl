/*---------------------------------------------------------------------------------------------------------------*/
//                           HIGH LEVEL PRICEPOINT LIBRARY : Spass
// Initial Version            						        		: 2011-03-17 Frauke Schall
// Update IsVisible and IsEnabled dependecies						: 2011-03-22 Frauke Schall
// rework m-Fynset to high levellib                         		: 2011-04-28 Frauke Schall & Nadine Seubert		
// Modified SpassEnSet to ensure m_vad_start set correctly  		: 2011-05-25 LayYuan
// implement new Fancy nf Settings                          		: 2011-06-03 Nadine Seubert
// update for multichannel adjustments                      		: 2011-06-08 Frauke Schall & Nadine Seubert
// Updated Spass_Set_Default 										: 2011-07-07 Nadia Neugeborn
// Added Spass_Set_ProgramSelection									: 2012-02-07 Frauke Schall
// Spass_Set_ProgramSelection only for DirMic and 700PP				: 2012-03-06 Frauke Schall
// Updated SpassEnSet to call Set_PhlNruSpassMode to set the controls affected by SNM & SPASS : 2012-04-09 Jenny
// Updated macros to the state on 2012-02-08   						: 2012-04-13 Jenny Lin
// Updated Spass_Set_Default() for PostFit							: 2012-04-19 Nadia
// Updated Spass_Set_ProgramSelection based on changes in IsVisible function : 2012-04-20 Frauke
// Peer review changes												: 2012-06-14 Nadine and Frauke
// Updated based on peer review (ProgramSelection)					: 2012-06-27 Frauke, Jenny and co
// Added SpassEn_ForOmni											: 2012-07-09 Frauke
// Updated SpassEn_ForOmni to only set Spass to on, if it is visible	: 2012-07-12 Frauke
// FirstFit peer review updates											: 2012-07-17 Nadia & Judith
// *********************************************CODE FREEZE*******************************************************
// ER55700: wrong Speech and Noise Multi slider setting				: 2012-08-29 Frauke
// Updated the omnidirectional to (remapped_pos >= 90)				: 2012-11-19 Jenny
// Update ID number in Set_ProgramSelection function									:	2013-10-29 Sonia Stasiak
// Sifit 7.3 Updates												: 2013-11-13	Mang Yew
// Added new function to check Hw controls and Set Sw controls		: 2014-01-14	Mang Yew
// Added PP500 set up for Program Selection in SPASS				: 2014-01-21	Mang Yew
// Update Structure for NR and SPASS interaction					: 2014-02-26 Mang Yew
// update on setpos to remove unused return argument				: 2014-03-04 Mang Yew
// Comment update for Program Selection								: 2014-03-18 Sonia
// Update SPASS default FF to call set SW Macro Control 			: 2014-03-24 Mang Yew
// Update for Sifit 7.3 Peer Review									: 2014-04-22 Mang Yew
// PEER REVIEWED CXX7.3 FOR PROGRAM SELECTION											: 2014-05-07 Sonia, Mie Mie, Jenny	
// FR66756 - Default after First fit for Noise Reduction is 
// changed to Expanded view.
// Therefore need update default function for SPASS					: 2014-05-15 Mang Yew	
// CR67331 remove SPASS from PP500								 	: 2014-05-15 Mang Yew	
// FR67691: To strong default directional speech enhancement for noisy environment and nfc  2014-06-04 Judith
// FR67691: Updated comments and added implementation for SPASS
//			ProgramSelection set for SW Macro Control only Function : 2014-06-06 Mang Yew
// Peer Review of Changes during 7.4  - no changes   			                    :2014-12-10 Frauke,Judith
/*---------------------------------------------------------------------------------------------------------------*/
namespace shs_sat {
    using shs_sat.*;
    
	package  Lib High_Level_Library_Spass{
		
/*---------------------------------------------------------------------------------------------------------------*/
//   Higher Level PP LIBRARY Function:    SpassSL_Set
//   Input      :  <int> Slider position from Cxx
//   Output      :  none
//   Description:  Sets the slider position based on selection
/*---------------------------------------------------------------------------------------------------------------*/
		public function void SpassSL_Set(int pos){
			BasicLibrary_Spass.SpassSL_Set(pos);
			BasicLibrary_Spass.SpassSL_Set_Sw (pos); // sifit 7.3			
		}  // Closing High_Level_Library_Spass.SpassSL_Set
				
/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    SpassSL_Get
//   Input      :  None
//   Output      :  <int> Actual slider position
//   Description:  Gets slider position based on instrument setting   
-----------------------------------------------------------------------------------------------------------------*/
		public function int SpassSL_Get(){
			//Sifit 7.3
			if (BasicLibrary_NoiseReduction.NoiseReductionView_Get () == true)
			{
				return BasicLibrary_Spass.SpassSL_Get_Sw ();
			}
			else // check hw settings
			{
				return BasicLibrary_Spass.SpassSL_Get ();
			} 
		}  //Closing High_Level_Library_Spass.SpassSL_Get
				
	
/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    Spass_Set_Default
//   Input      :  none
//   Output      :  none
//   Description:  remapping  Slider positions;  Price point and Family resolving function.    
-----------------------------------------------------------------------------------------------------------------*/
		public function void Spass_Set_Default(){
			int posBox   = -1;
			int posSL    = -1;
			  
			// Get the default position from Mid Level Library
			posBox	= 	Mid_Level_Library_Spass.SpassEn_DefaultPos();	
			posSL	=   Mid_Level_Library_Spass.SpassSL_DefaultPos();

			High_Level_Library_Spass.SpassEnSet(posBox); 		// Set SPASS checkbox
			High_Level_Library_Spass.SpassSL_Set(posSL);		// Set SPASS slider

		}  // Closing High_Level_Library_Spass.Spass_Set_Default()

/*---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    SpassEnSet
//   Input      :  <int>
//   Output      :  none
//   Description:  Set Spass according to selection. In case Spass is disabled (pos =0) and Speech and Noisemanager is enabled adjust Fancy postion to VAD position
-----------------------------------------------------------------------------------------------------------------*/
		public function void SpassEnSet(int pos){
			BasicLibrary_Spass.SpassEn_Set(pos);
			BasicLibrary_Spass.SpassEn_Set_Sw(pos); // sifit 7.3 need to check if any one calls this function because now sw var is moved out.
		}  // Closing High_Level_Library_Spass.SpassEnSet

/*---------------------------------------------------------------------------------------------------------*
	//	HIGH LEVEL LIBRARY - Spass_Set_ProgramSelection
	//	Input		:	<int> ID 
	//	Output		:	<void>
	//	Description	:	Function is setting SPASS (Directional Speech Enhancement) for all listening situation. 
	//	ID			:   
	//	Program ID	:   
	//				:	2 = Noisy Environment		7 = TV						12 = Tek/miniTek		20 = Phone T
	//				:	3 = Phone(Acoustically)		8 = Outdoor/Sport			13 = miniTek FM			21 = Induction Loop (T)		
	//				:	4 = Phone mT				9 = Privacy					14 = miniTek Telecoil
	//				:	5 = Bluetooth Phone			10 = Tinnitus				15 = Audio Input
	//				:	6 = Music					11 = Induction Loop (mT)	19 = Phone MT
	//	Comments	:	Variable int (ID) starts with ID 2, respectively to ID of each program.
/*---------------------------------------------------------------------------------------------------------*/
		public function void Spass_Set_ProgramSelection(int ID) //PEER REVIEWED CXX7.3
		{
			println ('[HAL]:HLIB Spass_Set_ProgramSelection ID = ' + ID);	
		
			switch(ID)
			{
				case 2:{ // Noisy Environment
				// If SPASS is visible for PP700, set to ON, slider set to MED
				// If SPASS is not visible set to OFF
					if(Mid_Level_Library_Spass.SpassEn_IsVisible()==true)
					{
						High_Level_Library_Spass.SpassEnSet (1); // sifit 7.3
						High_Level_Library_Spass.SpassSL_Set (1); // set to MED, m_spa_start = 8 -> FR67691
						}
			    		
					else
					{
						High_Level_Library_Spass.SpassEnSet (0); // sifit 7.3
					}
				}
				case 10:{ //Tinnitus
				//do nothing
					
				}
				default:{
				//For all programs except Noisy Environment and Tinnitus, SPASS set to off
				
				High_Level_Library_Spass.SpassEnSet (0);

				}
			} // closes switch (ID)
			
		} // closes High_Level_Library_Spass.Spass_Set_ProgramSelection

/*---------------------------------------------------------------------------------------------------------*
	//	HIGH LEVEL LIBRARY - Spass_Set_ProgramSelection_Sw_Controls
	//	Input		:	<int> ID 
	//	Output		:	<void>
	//	Description	:	Function is setting SPASS (Directional Speech Enhancement) for all listening situation. 
	//	ID			:   
	//	Program ID	:   
	//				:	2 = Noisy Environment		7 = TV						12 = Tek/miniTek		20 = Phone T
	//				:	3 = Phone(Acoustically)		8 = Outdoor/Sport			13 = miniTek FM			21 = Induction Loop (T)		
	//				:	4 = Phone mT				9 = Privacy					14 = miniTek Telecoil
	//				:	5 = Bluetooth Phone			10 = Tinnitus				15 = Audio Input
	//				:	6 = Music					11 = Induction Loop (mT)	19 = Phone MT
	//	Comments	:	Variable int (ID) starts with ID 2, respectively to ID of each program.
/*---------------------------------------------------------------------------------------------------------*/
		public function void Spass_Set_ProgramSelection_Sw_Controls(int ID) //PEER REVIEWED CXX7.3
		{
			println ('[HAL]:HLIB Spass_Set_ProgramSelection_Sw_Controls ID = ' + ID);	
		
			switch(ID)
			{
				case 2:{ // Noisy Environment
				// If SPASS is visible for PP700, set SwMacroSpassEnHp to ON, SwMacroSpassSlHp set to MED.
				// If SPASS is not visible set SwMacroSpassEnHp to OFF
					if(Mid_Level_Library_Spass.SpassEn_IsVisible()==true)
					{
						BasicLibrary_Spass.SpassEn_Set_Sw (1);
			    		BasicLibrary_Spass.SpassSL_Set_Sw (1); // SwMacroSpassSlHp = 1  FR67691
			    	}
					else
					{
						BasicLibrary_Spass.SpassEn_Set_Sw(0);
					}
				}
				case 10:{ //Tinnitus
				//do nothing
				
				}
				default:{
				//For all programs except Noisy Environment and Tinnitus, SPASS set to off
				BasicLibrary_Spass.SpassEn_Set_Sw(0);

				}
			} // closes switch (ID)
			
		} // closes High_Level_Library_Spass.Spass_Set_ProgramSelection_Sw_Controls

/*$---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    SpassEn_ForOmni
//   Input      :  Program ID: 
//				:  <int> remapped MicMode position
//   Output      :  <void>
//   Description:  Sets the Spass setting dependend on MicMode   
-----------------------------------------------------------------------------------------------------------------$*/	
		public function void  SpassEn_ForOmni(int pos_remapped){
			if((pos_remapped >= 90) && 
				(BasicLibrary_Spass.SpassEn_Get_Sw () == 1 ||
				  BasicLibrary_Spass.SpassEn_Get_Hw () == true)){
					BasicLibrary_Spass.SpassEn_Set_for_omni();
			}
				// If something other than omni is chosen AND Spass was previously enabled :
			else if (BasicLibrary_NoiseReduction.NoiseReductionView_Get () == false)
			{
				if (Mid_Level_Library_Spass.SpassEn_IsVisible() &&
					BasicLibrary_Spass.SpassEn_Get() &&
					(pos_remapped < 90))
				{
					High_Level_Library_Spass.SpassEnSet (1);
				}
			}
			else if (BasicLibrary_NoiseReduction.NoiseReductionView_Get () == true)
			{
				if (Mid_Level_Library_Spass.SpassEn_IsVisible() &&
					(pos_remapped < 90) && 
					BasicLibrary_NoiseReduction.NoiseReductionEn_Get ())
				{
					int NrSl = BasicLibrary_NoiseReduction.NoiseReductionSL_Get_Strength_Sw ();
						
					if (Mid_Level_Library_NoiseReduction.NoiseReductionSL_Check_Spass(NrSl) == true)
					{
						BasicLibrary_Spass.SpassEn_Set(1);
					}
					BasicLibrary_Spass.SpassSL_Set (Mid_Level_Library_NoiseReduction.NoiseReductionSL_Spass_Remapping (NrSl));
				}
			}
		}//High_Level_Library_Spass.SpassEn_ForOmni();
		
//------------------------------------------------Sifit 7.3--------------------------------------------------------
/*$---------------------------------------------------------------------------------------------------------------*
//   Higher Level PP LIBRARY Function:    Spass_Check_Hw_Set_Sw
//   Input      :  <void> 
//   Output      :  <void>
//   Description:  Sets the Spass setting Sw Var based on Hw Settings when Noise Reduction in Expanded View
-----------------------------------------------------------------------------------------------------------------$*/	
		public function void Spass_Check_Hw_Set_Sw(){
			if (BasicLibrary_Spass.SpassEn_Get_Sw () == 1|| BasicLibrary_Spass.SpassEn_Get_Hw () == true)
				{	
					BasicLibrary_Spass.SpassEn_Set_Sw (1);
				}
				else
				{
					BasicLibrary_Spass.SpassEn_Set_Sw (0);
				}
				BasicLibrary_Spass.SpassSL_Set_Sw 
				(BasicLibrary_Spass.SpassSL_Get());
				// End of setting SPASS based of SPASS swmacrovar
		}//High_Level_Library_Spass.Spass_Check_Hw_Set_Sw

/*---------------------------------------------------------------------------------------------------------------*
// 								  END Of Higher Level PP LIBRARY    Spass
-----------------------------------------------------------------------------------------------------------------*/	
	}	//package High_Level_Library_Spass
}	//namespace shs.sat

