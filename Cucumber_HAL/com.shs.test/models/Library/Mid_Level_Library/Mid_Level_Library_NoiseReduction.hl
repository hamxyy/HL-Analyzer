/*----------------------------------------------------------------------------------------------------------------
//                  MID LEVEL LIBRARY  :  Noise Reduction
// Initial Version                                         :  2013-11-05	Mang Yew
// Updates for Sifit7.3 Peer Review							: 2014-04-16 Mang Yew
// CR67331 remove SPASS from PP500							: 2014-05-15 Mang Yew	
// Peer Review of Changes during 7.4  - no changes   			                    :2014-12-10 Frauke,Judith
*/
/*---------------------------------------------------------------------------------------------------------------*/
namespace shs_sat
{
	using shs_sat.*;
	package Lib Mid_Level_Library_NoiseReduction
	{

	/*----------------------------------------------------------------------------------------------------------------
//   Basic LIBRARY Function:    NoiseReductionSL_IsVisible
//   Input      :  None 
//   Output      :  <bool> Visibility of the Noise Reduction Slider
//   Description:  Checks PricePoint dependency for visibility of Noise Reduction Slider.    
-----------------------------------------------------------------------------------------------------------------*/
		public function bool NoiseReductionSL_IsVisible ()
		{
			return ((cap:PricePoint == PricePoint.PP700 ||
						cap:PricePoint == PricePoint.PP500 ||
						cap:PricePoint == PricePoint.PP300 ||
						cap:PricePoint == PricePoint.PP100));
		} // Closes  Mid_Level_Library_NoiseReduction.NoiseReductionSL_IsVisible()

	/*----------------------------------------------------------------------------------------------------------------
//   Basic LIBRARY Function:    NoiseReductionSL_MaxPos
//   Input      :  None 
//   Output      :  <int> Maximum position of the slider for Noise Reduction
//   Description:  Returns the value for the Maximum position of the slider based on PricePoint.
-----------------------------------------------------------------------------------------------------------------*/
		public function int NoiseReductionSL_MaxPos ()
		{
			int retval = -1;
			switch (cap:PricePoint)
			{
				case PricePoint.PP700: // 5 Sliders for PP700
				{
					retval = 4;
				}
				case PricePoint.PP500: // 5 Sliders for PP500
				{
					retval = 4;
				}
				case PricePoint.PP300: // 3 Sliders for PP300
				{
					retval = 2;
				}
				case PricePoint.PP100: // 3 Sliders for PP100
				{
					retval = 2;
				}
				case PricePoint.PP75: // No Sliders for PP75
				{
					retval = 0;
				}
				default:
				{
					retval = -1;
				}
			}// close switch-case
			return retval;
		} // Closes  Mid_Level_Library_NoiseReduction.NoiseReductionSL_IsVisible()
	
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_IsVisiblePhysicalPos
//   Input		:  <int> Position (Physical/global) in the list that needs to be checked for visibility
//   Output      :  <bool> Whether the position is Visible or not ( Invisible -> False ) 
//   Description:   Decides the visibility of the individual entries in the Switch case
-----------------------------------------------------------------------------------------------------------------*/
		public function bool NoiseReductionSL_IsVisiblePhysicalPos (int physicalPos)
		{
			bool retval = false;
			
			switch (physicalPos)
			{
				case 0:{ // slider pos 1  
					retval = true;
				}
				case 1:{ // slider pos 2
					if (cap:PricePoint == PricePoint.PP700 || 
						cap:PricePoint == PricePoint.PP500 ||
						cap:PricePoint == PricePoint.PP300 ||
						cap:PricePoint == PricePoint.PP100)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				case 2:{ // slider pos 3
					if (cap:PricePoint == PricePoint.PP700 || 
						cap:PricePoint == PricePoint.PP500 ||
						cap:PricePoint == PricePoint.PP300 ||
						cap:PricePoint == PricePoint.PP100)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				case 3:{ // slider pos 4
					if (cap:PricePoint == PricePoint.PP700 || 
						cap:PricePoint == PricePoint.PP500)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				case 4:{ // slider pos 5
					if (cap:PricePoint == PricePoint.PP700 || 
						cap:PricePoint == PricePoint.PP500)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				default:{ // Default, it is not necessary. but anything other than in the above list will not be Enabled
					retval = false;
				} // closes default pos
			} // closes switch pos 
			
			return retval;               	 			
		} // Closes High_Level_Library_NoiseReduction.NoiseReductionSL_IsVisiblePhysicalPos	
		
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_Remapping
//   Input      :  <int> Slider position from Cxx
//   Output      :  <int> Actual Slider position with respect to Basic Function
//   Description:  remapping  Slider positions;  Price point and Family resolving function.    
-----------------------------------------------------------------------------------------------------------------*/
	public function int NoiseReductionSL_Remapping(int pos){
		int remapped_pos    =  -1;
	
	    /* Example REMAPPING  Table   
	     * Please update this REMAPPING table when there is a change in the code <when optimization based requests>  
	     * Current Mapping POS  1   2  3  4  5 
	     * A=10,B=20,C=30,D=40,E=50,F=60.G=70 -> The parameter set reference number known to the Basic Function
	     * Slider  POS          0	1   2	3	4
	     * PP 700               A	B	C	E	F
	     * PP 500               A	B	C	E	F   
	     * PP 300               A	E   G
	     * PP 100               A	E   G
	     * PP 75                A
	     */			
	
		switch (cap:PricePoint){	// Switch to the cases based on the Pricepoints and not on Max slider position
			case PricePoint.PP700:{            // For 700 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 20;		// pos=1 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 30;		// pos=2 w.r.t. PP700
						}
					case 3:{
						remapped_pos  = 50;		// pos=3 w.r.t. PP700
						}
					case 4:{
						remapped_pos  = 60;		// pos=4 w.r.t. PP700
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP700			
			case PricePoint.PP500:{            // For 500 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 20;		// pos=1 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 30;		// pos=2 w.r.t. PP700
						}
					case 3:{
						remapped_pos  = 50;		// pos=3 w.r.t. PP700
						}
					case 4:{
						remapped_pos  = 60;		// pos=4 w.r.t. PP700
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP500       
			case PricePoint.PP300:{            // For 300 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 50;		// pos=1 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 70;		// pos=2 w.r.t. PP700
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP300	       
			case PricePoint.PP100:{            // For 100 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 50;		// pos=1 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 70;		// pos=2 w.r.t. PP700
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP100
			case PricePoint.PP75:{            // For 75 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// "1-5" - pos=0 w.r.t. PP700
						}							
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP75		
			default:{// does not make sense for the remapped_pos to return -1
				remapped_pos = -1;
			}// closes PricePoint default
		}// closes switch PricePoint
	
		return remapped_pos;	
	}  // Closing Mid_Level_Library_NoiseReduction.NoiseReductionSL_Remapping	

/*----------------------------------------------------------------------------------------------------------------
//   BASIC LIBRARY Function:    NoiseReductionSL_Set_Strength_Sw
//   Input      :  <int> Desired slider position with respect to 70x Price point 
//   Output      :  <int> Actual slider position with respect to Current Price point which was set 
//   Description:  Sets the NoiseReduction Slider Sw controls based on Cxx input position and returns the Slider positions wrt 70x PP
-----------------------------------------------------------------------------------------------------------------*/
		public function int NoiseReductionSL_Set_Strength_Sw (int pos)
		{
			int retval = -1;
			
			switch (cap:PricePoint)
			{ // Switch to the cases based on the Pricepoints and not on Max slider position
				case PricePoint.PP700:{ // For 700 Price point 
					if (pos == 0 || pos ==1 || pos == 2 || pos == 3 || pos == 4)
					{
					 	BasicLibrary_NoiseReduction.NoiseReductionSL_Set_Strength_Sw (pos);
					 	retval = pos;
					}
					else
					{
						retval = -1;
					}
				} // closes PP700			
				case PricePoint.PP500:{ // For 500 Price point 
					if (pos == 0 || pos ==1 || pos == 2 || pos == 3 || pos == 4)
					{
						BasicLibrary_NoiseReduction.NoiseReductionSL_Set_Strength_Sw (pos);
					 	retval = pos;
					}
					else
					{
						retval = -1;
					}
				} // closes PP500       
				case PricePoint.PP300:{ // For 300 Price point 
					if (pos == 0 || pos ==1 || pos == 2)
					{
						BasicLibrary_NoiseReduction.NoiseReductionSL_Set_Strength_Sw (pos);
					 	retval = pos;
					}
					else
					{
						retval = -1;
					}
				} // closes PP300	       
				case PricePoint.PP100:{ // For 100 Price point  
					if (pos == 0 || pos ==1 || pos == 2)
					{
						BasicLibrary_NoiseReduction.NoiseReductionSL_Set_Strength_Sw (pos);
					 	retval = pos;
					}
					else
					{
						retval = -1;
					}
				} // closes PP100
				case PricePoint.PP75:{ // For 75 Price point 
					if (pos == 0)
					{
						BasicLibrary_NoiseReduction.NoiseReductionSL_Set_Strength_Sw (pos);
					 	retval = pos;
					}
					else
					{
						retval = -1;
					} 
				} // closes PP75		
				default:{ // does not make sense to return -1
					retval = -1;
				} // closes PricePoint default
			} // closes switch PricePoint
			println('[HAL]:Mid_Level_Library_NoiseReduction.NoiseReductionSL_Set_Strength_Sw Pos = '+retval );	
			return retval;
		}// closes Mid_Level_Library_NoiseReduction.NoiseReductionSL_Set_Strength_Sw

		/*----------------------------------------------------------------------------------------------------------------
//   Basic LIBRARY Function:    NoiseReductionSL_Get_Strength_Sw
//   Input      :  None
//   Output      :  <int> remapped int of UI position
//   Description:  Compares the HI settings and returns the remapped pos of UI position   
-----------------------------------------------------------------------------------------------------------------*/
			public function int NoiseReductionSL_Get_Strength_Sw ()
			{
				int retval = BasicLibrary_NoiseReduction.NoiseReductionSL_Get_Strength_Sw ();
				
				if (cap:PricePoint == PricePoint.PP700)
				{
					return retval;
				}
				else if (cap:PricePoint == PricePoint.PP500)
				{
					return retval;
				}
				else if (cap:PricePoint == PricePoint.PP300)
				{
					if(retval == 0 || retval == 1 || retval == 2)
					{
						return retval;
					}
					else
					{
						println('[HAL]:Mid_Level_Library_NoiseReduction.NoiseReductionSL_Get_Strength_Sw !!ERROR: Slider position out of SPEC/Range!!');
						return -1;
					}
				}
				else if (cap:PricePoint == PricePoint.PP100)
				{
					if(retval == 0 || retval == 1 || retval == 2)
					{
						return retval;
					}
					else
					{
						println('[HAL]:Mid_Level_Library_NoiseReduction.NoiseReductionSL_Get_Strength_Sw !!ERROR: Slider position out of SPEC/Range!!');
						return -1;
					}
				}
				else if (cap:PricePoint == PricePoint.PP75)
				{
					if(retval == 0)
					{
						return retval;
					}
					else
					{
						println('[HAL]:Mid_Level_Library_NoiseReduction.NoiseReductionSL_Get_Strength_Sw !!ERROR: Slider position out of SPEC/Range!!');
						return -1;
					}
				}
				else
				{
					return -1;
				}
				
		} // Closes	Mid_Level_Library_NoiseReduction.NoiseReductionSL_Get_Strength_Sw
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_SpeechNoiseMgmnt_Remapping
//   Input      :  <int> Slider position from Cxx
//   Output      :  <int> Actual Slider position with respect to Basic Function
//   Description:  remapping  Slider positions;  Price point and Family resolving function.    
-----------------------------------------------------------------------------------------------------------------*/
	public function int NoiseReductionSL_SpeechNoiseMgmnt_Remapping(int pos){
		int remapped_pos    =  -1;
	
	    /* Example REMAPPING  Table   
	     * Please update this REMAPPING table when there is a change in the code <when optimization based requests>  
	     * Current Mapping POS  1   2  3  4  5 
	     * A=10,B=20,C=30,D=40,E=50,F=60.G=70 -> The parameter set reference number known to the Basic Function
	     * Slider  POS          0	1   2	3	4
	     * PP 700               A	B	C	E	F
	     * PP 500               A	B	C	E	E   
	     * PP 300               A	A   E
	     * PP 100               A	E   G
	     * PP 75                A
	     */			
	
		switch (cap:PricePoint){	// Switch to the cases based on the Pricepoints and not on Max slider position
			case PricePoint.PP700:{            // For 700 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 20;		// pos=1 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 30;		// pos=2 w.r.t. PP700
						}
					case 3:{
						remapped_pos  = 50;		// pos=4 w.r.t. PP700
						}
					case 4:{
						remapped_pos  = 60;		// pos=5 w.r.t. PP700
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP700			
			case PricePoint.PP500:{            // For 500 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 20;		// pos=1 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 30;		// pos=2 w.r.t. PP700
						}
					case 3:{
						remapped_pos  = 50;		// pos=4 w.r.t. PP700
						}
					case 4:{
						remapped_pos  = 50;		// pos=4 w.r.t. PP700
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP500       
			case PricePoint.PP300:{            // For 300 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 50;		// pos=4 w.r.t. PP700
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP300	       
			case PricePoint.PP100:{            // For 100 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}
					case 1:{
						remapped_pos  = 50;		// pos=4 w.r.t. PP700
						}
					case 2:{
						remapped_pos  = 70;		// pos=6 w.r.t. PP700
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP100
			case PricePoint.PP75:{            // For 75 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 10;		// pos=0 w.r.t. PP700
						}							
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP75		
			default:{// does not make sense for the remapped_pos to return -1
				remapped_pos = -1;
			}// closes PricePoint default
		}// closes switch PricePoint
	
		return remapped_pos;	
	}  // Closing Mid_Level_Library_NoiseReduction.NoiseReductionSL_SpeechNoiseMgmnt_Remapping	

		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_SoundSmoothing_Remapping
//   Input      :  <int> Slider position from Cxx
//   Output      :  <int> Actual Slider position with respect to Basic Function
//   Description:  remapping  Slider positions;  Price point and Family resolving function.    
-----------------------------------------------------------------------------------------------------------------*/
	public function int NoiseReductionSL_SoundSmoothing_Remapping(int pos){
		int remapped_pos    =  -1;
	
	    /* Example REMAPPING  Table   
	     * Please update this REMAPPING table when there is a change in the code <when optimization based requests>  
	     * N=11, A=0,B=1,C=2 -> The parameter set reference number known to the Basic Function
	     * Slider  POS          0	1   2	3	4
	     * PP 700               N	A	B	B	C
	     * PP 500               N	A	B	B	C   
	     * PP 300               N   A   A
	     * PP 100               N	N   N  
	     * PP 75                N
	     */			
	
		switch (cap:PricePoint){	// Switch to the cases based on the Pricepoints and not on Max slider position
			case PricePoint.PP700:{            // For 700 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 0;		// min strength of SS
						}
					case 2:{
						remapped_pos  = 1;		// med strength of SS
						}
					case 3:{
						remapped_pos  = 1;		// med strength of SS
						}
					case 4:{
						remapped_pos  = 2;		// max strength of SS
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP700			
			case PricePoint.PP500:{            // For 500 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 0;		// min strength of SS
						}
					case 2:{
						remapped_pos  = 1;		// med strength of SS
						}
					case 3:{
						remapped_pos  = 1;		// med strength of SS
						}
					case 4:{
						remapped_pos  = 2;		// max strength of SS
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP500       
			case PricePoint.PP300:{            // For 300 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 2;		// max strength of SS
						}
					case 2:{
						remapped_pos  = 2;		// max strength of SS
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP300	       
			case PricePoint.PP100:{            // For 100 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 2:{
						remapped_pos  = 11;		// no strength should be set
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP100
			case PricePoint.PP75:{            // For 75 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}							
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP75		
			default:{// does not make sense for the remapped_pos to return -1
				remapped_pos = -1;
			}// closes PricePoint default
		}// closes switch PricePoint
		return remapped_pos;	
	}  // Closing Mid_Level_Library_NoiseReduction.NoiseReductionSL_SoundSmoothing_Remapping	

		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_Spass_Remapping
//   Input      :  <int> Slider position from Cxx
//   Output      :  <int> Actual Slider position with respect to Basic Function
//   Description:  remapping  Slider positions;  Price point and Family resolving function.    
-----------------------------------------------------------------------------------------------------------------*/
	public function int NoiseReductionSL_Spass_Remapping(int pos){
		int remapped_pos    =  -1;
	
	    /* Example REMAPPING  Table   
	     * Please update this REMAPPING table when there is a change in the code <when optimization based requests>  
	     * N=11, A=0,B=1,C=2 -> The parameter set reference number known to the Basic Function
	     * Slider  POS          0	1   2	3	4
	     * PP 700               N	A	A	B	C
	     * PP 500               N   N   N   N   N
	     * PP 300               N   N   N
	     * PP 100               N	N   N
	     * PP 75                N
	     */			
	
		switch (cap:PricePoint){	// Switch to the cases based on the Pricepoints and not on Max slider position
			case PricePoint.PP700:{            // For 700 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 0;		// min strength of SPASS
						}
					case 2:{
						remapped_pos  = 0;		// min strength of SPASS
						}
					case 3:{
						remapped_pos  = 1;		// med strength of SPASS
						}
					case 4:{
						remapped_pos  = 2;		// max strength of SPASS
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP700			
			case PricePoint.PP500:{            // For 500 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 2:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 3:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 4:{
						remapped_pos  = 11;		// no strength should be set
						}
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP500       
			case PricePoint.PP300:{            // For 300 Price point 
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 2:{
						remapped_pos  = 11;		// no strength should be set
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP300	       
			case PricePoint.PP100:{            // For 100 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 1:{
						remapped_pos  = 11;		// no strength should be set
						}
					case 2:{
						remapped_pos  = 11;		// no strength should be set
						}								
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP100
			case PricePoint.PP75:{            // For 75 Price point  
				switch (pos){
					case 0:{
						remapped_pos  = 11;		// no strength should be set
						}							
					default:{ 
						remapped_pos = -1;
					}// closes default
		        }// closes switch pos
			}// closes PP75		
			default:{// does not make sense for the remapped_pos to return -1
				remapped_pos = -1;
			}// closes PricePoint default
		}// closes switch PricePoint
		return remapped_pos;	
	}  // Closing Mid_Level_Library_NoiseReduction.NoiseReductionSL_Spass_Remapping	
								
/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionView_DefaultPos
//   Input		:  none
//   Output      :  <int> Default checkbox condition for NoiseReduction view
//   Description:  Default view for NoiseReduction after FirstFit
-----------------------------------------------------------------------------------------------------------------*/	
		public function int NoiseReductionView_DefaultPos() {
			return 0;
		} //Closes Mid_Level_Library_NoiseReduction.NoiseReductionView_DefaultPos()
		
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionEn_DefaultPos
//   Input		:  none
//   Output      :  <int> Default checkbox condition for NoiseReduction Checkbox
//   Description:  Default NoiseReduction checkbox settings after FirstFit
-----------------------------------------------------------------------------------------------------------------*/	
		public function int NoiseReductionEn_DefaultPos() {
			return 1;
		} //Closes Mid_Level_Library_NoiseReduction.NoiseReductionEn_DefaultPos()
		
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_DefaultPos
//   Input		:  none
//   Output      :  <int> Default checkbox condition for NoiseReduction Slider
//   Description:  Default slider position for NoiseReduction after FirstFit
-----------------------------------------------------------------------------------------------------------------*/	
		public function int  NoiseReductionSL_DefaultPos() {
		
			if (cap:PricePoint == PricePoint.PP700) //Default Position 2 for PP700
			{
				return 2;
			}
			else if (cap:PricePoint == PricePoint.PP500) //Default Position 2 for PP500
			{
				return 2;
			}
			else if (cap:PricePoint == PricePoint.PP300) //Default Position 1 for PP300
			{
				return 1;
			}
			else if (cap:PricePoint == PricePoint.PP100) //Default Position 1 for PP100
			{
				return 1;
			}
			else if (cap:PricePoint == PricePoint.PP75) //Default Position 0 for PP75 (i.e. PP75 no slider available)
			{
				return 0;
			}
			else
			{
				return -1;
			}
			
		} //Closes Mid_Level_Library_NoiseReduction.NoiseReductionSL_DefaultPos()

	/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionEn_Default_On_Off
//   Input		:  none
//   Output      :  <int> Default checkbox condition for NoiseReduction Slider
//   Description:  Default ON OFF settings for SnM, SPASS, SS based on NR slider position regardless of dependencies
-----------------------------------------------------------------------------------------------------------------*/	
		public function int  NoiseReductionEn_Default_On_Off(int pos) {
		
			switch (cap:PricePoint){
				case PricePoint.PP700:{
					switch (pos){
						case 0:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
						case 1:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(1);
						}
						case 2:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(1);
						}
						case 3:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(1);
						}
						case 4:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(1);
						}
						default:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (0);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
					}
				}
				case PricePoint.PP500:{
					switch (pos){
						case 0:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
						case 1:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
						case 2:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
						case 3:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(1);
						}
						case 4:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(1);
						}
						default:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (0);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
					}
					
				}
				case PricePoint.PP300:{
					switch (pos){
						case 0:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
						case 1:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
						case 2:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (1);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
						default:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (0);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
					}
					
				}
				case PricePoint.PP100:{
					switch (pos){
						default:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
					}
					
				}
				case PricePoint.PP75:{
					switch (pos){
						default:{
							BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (1);
							BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
							BasicLibrary_Spass.SpassEn_Set(0);
						}
					}
					
				}
				default:{
						BasicLibrary_SpeechNoiseMgmnt.SpeechNoiseMgmntEn_Set (0);
						BasicLibrary_SoundSmoothing.SoundSmoothingEn_Set (0);
						BasicLibrary_Spass.SpassEn_Set(0);
				}
			
			}
			return pos;
			
		} //Closes Mid_Level_Library_NoiseReduction.NoiseReductionEn_Default_On_Off
		
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReduction_Check_PricePoints
//   Input		:  none
//   Output      :  <bool> Device PricePoints
//   Description:  Checks and returns current pricepoints of the device.
-----------------------------------------------------------------------------------------------------------------*/	
		public function string NoiseReduction_Check_PricePoints() {
		
			string pricepoint = "ERROR";
			//Spass is only available for price point 700
			switch (cap:PricePoint){
				case PricePoint.PP700:{ 
					pricepoint = "PP700";
				}
				case PricePoint.PP500:{ 
					pricepoint = "PP500";
				}
				case PricePoint.PP300:{ 
					pricepoint = "PP300";
				}
				case PricePoint.PP100:{ 
					pricepoint = "PP100";
				}
				case PricePoint.PP75:{ 
					pricepoint = "PP75";
				}
				default :{
					pricepoint = "ERROR";	//Default is to not have Spass
				}
			}// closes switch case
			
			return pricepoint;
		} //Closes Mid_Level_Library_NoiseReduction.NoiseReduction_Check_PricePoints()
		
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_Check_Spass
//   Input		:  none
//   Output      :  <bool> True/False activation of SPASS
//   Description:  Checks the position of the Noise Reduction Slider position and PricePoint of the device and 
//				   returns if the position of the Noise Reduction should activate/deactivate SPASS.
-----------------------------------------------------------------------------------------------------------------*/	
		public function bool NoiseReductionSL_Check_Spass(int pos) {
			
			bool retval = false;
			
			switch (cap:PricePoint){
				case PricePoint.PP700:{ //Spass is only available for price point 700
					if (pos > 0 && pos <= 4)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				default :{
					retval = false;	//Default is to not have Spass
				}
			}// closes switch case
			
			return retval;
		} //Closes Mid_Level_Library_NoiseReduction.NoiseReductionSL_Check_Spass()
		
		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    NoiseReductionSL_Check_SoundSmoothing
//   Input		:  none
//   Output      :  <bool> True/False activation of SoundSmoothing
//   Description:  Checks the position of the Noise Reduction Slider position and PricePoint of the device and 
//				   returns if the position of the Noise Reduction should activate/deactivate SoundSmoothing
-----------------------------------------------------------------------------------------------------------------*/	
		public function bool NoiseReductionSL_Check_SoundSmoothing(int pos) {
			
			bool retval = false;
			
			switch (cap:PricePoint){
				case PricePoint.PP700:{
					if (pos > 0 && pos <= 4)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				case PricePoint.PP500:{
					if (pos > 0 && pos <= 4)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				case PricePoint.PP300:{
					if (pos > 0 && pos <= 2)
					{
						retval = true;
					}
					else
					{
						retval = false;
					}
				}
				default :{
					retval = false;
				}
			}// closes switch case
			
			return retval;
		} //Closes Mid_Level_Library_NoiseReduction.NoiseReductionSL_Check_SoundSmoothing()
		

/*----------------------------------------------------------------------------------------------------------------
// 								  END Of MID LEVEL  LIBRARY   Noise Reduction 
-----------------------------------------------------------------------------------------------------------------*/
	} //package Mid_Level_Library_NoiseReduction 

} //namespace shs.sat