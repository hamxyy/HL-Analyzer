/*---------------------------------------------------------------------------------------------------------------*
//                             MID LEVEL LIBRARY : User Control
// Initial version																		: 2012-03-27 Cecil Wilson
// Updated function name for program change check and added VC user control check		: 2012-03-27 Cecil Wilson
// Added Wireless coupling controls which checks for Program and Volume coupling CR54939: 2012-06-12 Cecil Wilson
// Added function to check for wireless Rc and program control for DAI Toggle checkbox 
// greyed-out. CR 56697.																			: 2012-08-16 Mang Yew
// Added check for RCU control. ER58413  												: 2012-10-09 Mang Yew
// Added Check_For_UserControl() to check user control type								:	2012-10-30 Mang Yew
// Added assertion message									: 2012-12-18 Jenny Lin
// Removed ProgramControlLocal and update IsEnabled() due to ER59269 and added 
//Check_Volume_Change_Capability 														: 2013-01-31 Mang Yew
// ******SIFIT7.2_PEERREVIEWED: partially related to InputMode macros. Outstanding: Beeps related review  :  2013-07-30   Jenny, Judith
// refractor: Optimize code									: 2013-12-02 Jenny
// Sifit7.3 Peer review																: 2014-04-15 Jenny, Judith
// Sifit7.3 Peer review	(for Beeps)													: 2014-04-28 Jenny, Jeline
// Peer Review of Changes during 7.4  - no changes   			                    :2014-12-10 Frauke,Judith
-----------------------------------------------------------------------------------------------------------------
*/
namespace shs_sat
{
	using shs_sat.*;
	package Lib Mid_Level_Library_UserControl
	{

	/*---------------------------------------------------------------------------------------------------------------*
//   MID LEVEL LIBRARY Function: Check_Program_Change_UserControl
//   Input		:  <none>
//   Output      :  <bool> True if the "Program Change" user control is available in the device, else False 
//   Description:  This function checks if the device has any user control or WLS UserControl to change the Hearing Programs	
-----------------------------------------------------------------------------------------------------------------$*/
		public function bool Check_Program_Change_UserControl () //SIFIT7.3PEERREVIEWED
		{
			if (BasicLibrary_UserControl.IsRCUConnected() == false
				&& hi:d8SwWlsPrgEn == d8SwWlsPrgEn.off
			){
			//Check if WLS UserControl & E2e Wireless Checkbox is off.
			//To check if the instrument has any program change capability.
				return Mid_Level_Library_UserControl.Check_Program_Change_Capability ();
				//return Mid_Level_Library_UserControl.Check_ProgramVolume_Change_Capability ("ProgramOnly");
			}
			else
			{
			// This device have WLS UserControl or E2e Wireless activated, able to change the hearing programs.
				println ('[HAL] MLIB.Check_Program_Change_UserControl >> return TRUE');
				return true;
			}
		} // Close Mid_Level_Library_UserControl.Check_Program_Change_UserControl()

		/*---------------------------------------------------------------------------------------------------------------*
//   Mid Level PP LIBRARY Function:    Check_Program_Change_UserControl_For_Toggle_Greyed_Out()
//   Input		:  none
//   Output      :  <bool> Returns True if toggle is enabled; False if toggle not enabled.
//   Description:  Decides the greyed out/enable function of the DAI Toggle Checkbox.
				  This function checks if the device has any user control or WLS UserControl to change the Hearing Programs.
-----------------------------------------------------------------------------------------------------------------*/
		public function bool Check_Program_Change_UserControl_For_Toggle_Greyed_Out () //SIFIT7.3PEERREVIEWED
		{
			println ('[HAL] MLIB.Check_Program_Change_UserControl_For_Toggle_Greyed_Out');
			// NO NEED CHECK E2E BECAUSE TOGGLE FUNCTIONALITY SHOULD ONLY BE FOR THE CURRENT EAR!
			
			if (BasicLibrary_UserControl.IsRCUConnected() == false)
			{
			// If no RCU connected, IsEnabled() depends on the instruments' program change capability.
				return Mid_Level_Library_UserControl.Check_Program_Change_Capability ();
				//return Mid_Level_Library_UserControl.Check_ProgramVolume_Change_Capability ("ProgramOnly");
			}
			else
			{
			// This device have REMOTE controls to change the hearing programs.
				return true;
			}
		} // Close Mid_Level_Library_UserControl.Check_Program_Change_UserControl_For_Toggle_Greyed_Out()

		/*---------------------------------------------------------------------------------------------------------------*
//   MID LEVEL LIBRARY Function: Check_Volume_Change_UserControl
//   Input		:  <none>
//   Output      :  <bool> True if the "Volume Change" user control is available in the device, else False 
//   Description:  This function checks if the device has any user control or Remote control to change the Volume 
-----------------------------------------------------------------------------------------------------------------$*/
		public function bool Check_Volume_Change_UserControl () //SIFIT7.3PEERREVIEWED
		{
			println ('[HAL] MLIB.Check_Volume_Change_UserControl');
			
			if (BasicLibrary_UserControl.IsRCUConnected() == false 
				&& hi:d8SwWlsVcScEn == d8SwWlsVcScEn.off
			){
			// This device does not have any REMOTE controls with VC change and E2e Volume coupling.
				return Mid_Level_Library_UserControl.Check_Volume_Change_Capability ();
			}
			else{
			// This device have REMOTE controls to change the hearing programs.
				return true;
			}
		} // Close Mid_Level_Library_UserControl.Check_Volume_Change_UserControl()


		/*---------------------------------------------------------------------------------------------------------------*
//   Basic Level LIBRARY Function: Check_Volume_Change_Capability()
//   Input		:  <none>
//   Output      :  <bool> "True" / "False".
//   Description:  This function checks the capability of VCLocal.
* 					If device is capable of local volume change control, return "True". Else "False".
-----------------------------------------------------------------------------------------------------------------$*/
		public function bool Check_Volume_Change_Capability () //SIFIT7.3PEERREVIEWED
		{
			println ('[HAL] MLIB.Check_Volume_Change_Capability');
			if (cap:VcLocal == VcLocal.noVC)
			{
			// This device does not have a local Volume change user control.
				return false;
			}
			else if (cap:VcLocal == VcLocal.endlessVC || cap:VcLocal == VcLocal.endstopVC)
			{
			// This device does has a local endlessVC user control for Volume Change.
				return true;
			}
			else 
			{
			//(cap:VcLocal == VcLocal.SwUcConfigurableVC)
			// This device does has a Software configurable user control
			// So need to check if it is configured for Program change  
				if (BasicLibrary_UserControl.Check_UserControl_ProgramVc_Config () == "VolumeOnly" ||
						BasicLibrary_UserControl.Check_UserControl_ProgramVc_Config () == "ProgramVolume")
				//if (Mid_Level_Library_UserControl.Check_ProgramVolume_Change_Capability("VolumeOnly"))
				{
				// This device does has a Software configurable user control for Volume change	
					return true;
				}
				else
				{
				// This device does NOT have a Software configurable user control for PROG change						
					return false;
				} // closing SwUcConfigurableVC					

			} // closing cap:VcLocal
		} // Close Mid_Level_Library_UserControl.Check_Volume_Change_Capability()
		
		/*---------------------------------------------------------------------------------------------------------------*
//   Basic Level LIBRARY Function: Check_Program_Change_Capability()
//   Input		:  <none>
//   Output      :  <bool> "True" / "False".
//   Description:  This function checks the capability of Program Change Control.
* 					If device is capable of local program change control, return "True". Else "False".
-----------------------------------------------------------------------------------------------------------------$*/
		public function bool Check_Program_Change_Capability () //SIFIT7.3PEERREVIEWED
		{
			println ('[HAL] MLIB.Check_Program_Change_Capability');
			if (cap:UserControl == UserControl.NoUserCtrl)
			{
				println ('[HAL] MLIB.Check_Program_Change_Capability >> NoUserCtrl');
				return false;
			}
			else if (cap:UserControl == UserControl.PushBtn)
			{
				println ('[HAL] MLIB.Check_Program_Change_Capability >> PushBtn');
				if (BasicLibrary_UserControl.Check_UserControl_PushButton_Config () == "ProgramOnly")
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			else if (cap:UserControl == UserControl.RockerSwt)
			{
				println ('[HAL] MLIB.Check_Program_Change_Capability >> RockerSwt');
				if (BasicLibrary_UserControl.Check_UserControl_RockerSwt_Config () == "ProgramOnly" ||
						BasicLibrary_UserControl.Check_UserControl_RockerSwt_Config () == "ProgramVolume")
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			else if (cap:UserControl == UserControl.PushBtnOrFlatCvr)
			{
				println ('[HAL] MLIB.Check_Program_Change_Capability >> PushBtnOrFlatCvr');
				if (BasicLibrary_UserControl.Check_UserControl_None_Config () == "None")
				{
					return false;
				}
				else
				{
					if (BasicLibrary_UserControl.Check_UserControl_PushButton_Config () == "ProgramOnly")
					{
						return true;
					}
					else
					{
						return false;
					}
				}
			}
			else if (cap:UserControl == UserControl.PushBtnOrRockerSwtOrFlatCvr)
			{
				println ('[HAL] MLIB.Check_Program_Change_Capability >> PushBtnOrRockerSwtOrFlatCvr');
				if (BasicLibrary_UserControl.Check_UserControl_ProgramVc_Config () == "ProgramOnly" ||
						BasicLibrary_UserControl.Check_UserControl_ProgramVc_Config () == "ProgramVolume")
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			else // For the case of PushBtnNonConfAndRockerSwtNonConf, PushBtnConfAndRockerSwtNonConf,
			//PushBtnNonConfAndRockerSwtConf

			{
				println ('[HAL] MLIB.Check_Program_Change_Capability >> PushBtnNonConfAndRockerSwtNonConf, PushBtnConfAndRockerSwtNonConf,PushBtnNonConfAndRockerSwtConf');
				if (BasicLibrary_UserControl.Check_UserControl_PushButton_Config () == "ProgramOnly" ||
						BasicLibrary_UserControl.Check_UserControl_RockerSwt_Config () == "ProgramOnly" ||
						BasicLibrary_UserControl.Check_UserControl_RockerSwt_Config () == "ProgramVolume")
				{
					return true;
				}
				else
				{
					return false;
				}
			} // closing UserControl
		} // Close Mid_Level_Library_UserControl.Check_Program_Change_Capability()


		/*---------------------------------------------------------------------------------------------------------------*
//   Basic Level LIBRARY Function: Check_For_UserControl
//   Input		:  <none>
//   Output      :  <string> The UserControl type
//   Description:  This function checks the UserControl type. 
* 					"NoUserCtrl", "PushBtn", "RockerSwt", "PushBtnOrFlatCvr", "PushBtnOrRockerSwtOrFlatCvr", 
* 					"PushBtnNonConfAndRockerSwtNonConf", "PushBtnConfAndRockerSwtNonConf", "PushBtnNonConfAndRockerSwtConf"
// 7.3TOBEDELETED
-----------------------------------------------------------------------------------------------------------------$*/
		public function string Check_For_UserControl ()
		{
			println ('[HAL] MLIB.Check_For_UserControl');
			int retval = 0;
			string UserCtrl = "";
			switch (cap:UserControl)
			{
				case UserControl.NoUserCtrl:{
					UserCtrl = "NoUserCtrl";
				}
				case UserControl.PushBtn:{
					UserCtrl = "PushBtn";
				}
				case UserControl.RockerSwt:{
					UserCtrl = "RockerSwt";
				}
				case UserControl.PushBtnOrFlatCvr:{
					UserCtrl = "PushBtnOrFlatCvr";
				}
				case UserControl.PushBtnOrRockerSwtOrFlatCvr:{
					UserCtrl = "PushBtnOrRockerSwtOrFlatCvr";
				}
				case UserControl.PushBtnNonConfAndRockerSwtNonConf:{
					UserCtrl = "PushBtnNonConfAndRockerSwtNonConf";
				}
				case UserControl.PushBtnConfAndRockerSwtNonConf:{
					UserCtrl = "PushBtnConfAndRockerSwtNonConf";
				}
				case UserControl.PushBtnNonConfAndRockerSwtConf:{
					UserCtrl = "PushBtnNonConfAndRockerSwtConf";
				}
				default:{
					retval = -1;
					UserCtrl = "Error!!!";
				}
			}
			println ('[HAL] MLIB.Check_For_UserCtrl    return >>' + UserCtrl);
			assertion (retval >= 0, "[MacroError] Undefined state of UserControl!");
			return UserCtrl;
		} // Close Mid_Level_Library_UserControl.Check_For_UserControl	

	} //package Mid_Level_Library_UserControl

} //namespace shs.sat