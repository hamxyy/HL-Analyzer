/*
 * generated by Xtext
 */
package com.shs.hl.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

import com.shs.hl.services.HearingLanguageGrammarAccess.StatementElements;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class HearingLanguageFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig c) {
		com.shs.hl.services.HearingLanguageGrammarAccess f = (com.shs.hl.services.HearingLanguageGrammarAccess) getGrammarAccess();

		c.setAutoLinewrap(100);
		// find common keywords an specify formatting for them
		for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("(", ")")) {
			c.setNoSpace().after(pair.getFirst());
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setNoSpace().before(pair.getSecond());
		}
		for (Keyword comma : f.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}

		for (Keyword reference : f.findKeywords("->")) {
			c.setNoSpace().around(reference);
		}

		// c.setNoLinewrap().before(f.getComparisonLevelAccess().getRightAdditionLevelParserRuleCall_1_1_0());

		for (Keyword key : f.findKeywords("==", "!=", ">", "<", ">=", "<=")) {
			c.setNoLinewrap().after(key);

		}

		for (Keyword key : f.findKeywords("||", "&&", "&", "|")) {
			c.setLinewrap(1).after(key);

		}

		for (Keyword colon : f.findKeywords(":")) {
			c.setNoLinewrap().before(colon);
			c.setNoSpace().around(colon);
		}

		for (Keyword comma : f.findKeywords(";")) {
			c.setNoSpace().before(comma);
			c.setLinewrap().after(comma);
		}
		// block formatting
		// each curly brace block is indent seperately
		// each brace is on its own line
		for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) {
			c.setLinewrap(1).around(pair.getFirst());

			// c.setIndentationIncrement().after(pair.getFirst());
			c.setIndentation(pair.getFirst(), pair.getSecond());
			// c.setIndentationDecrement().before(pair.getSecond());
			c.setLinewrap(1).around(pair.getSecond());
		}

		// Special formatting for if statements

		c.setIndentation(
				f.getIfStatementAccess().getLeftParenthesisKeyword_1(), f
						.getIfStatementAccess().getRightParenthesisKeyword_3());

		StatementElements e = f.getStatementAccess();
		for (Keyword key : e.findKeywords(";")) {
			c.setLinewrap(0, 1, 1).after(key);
		}

		for (Keyword key : e.findKeywords("break")) {
			c.setLinewrap(0, 1, 1).before(key);
		}
		for (Keyword key : e.findKeywords("return")) {
			c.setLinewrap(0, 1, 1).before(key);
		}

		for (Keyword key : e.findKeywords("println")) {
			c.setNoSpace().around(key);
			c.setNoLinewrap().before(key);
		}

		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
		// ...
	}
}
