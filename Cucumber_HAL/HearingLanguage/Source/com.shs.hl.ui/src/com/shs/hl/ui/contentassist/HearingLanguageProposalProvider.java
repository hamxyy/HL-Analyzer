/*
you* generated by Xtext
 */
package com.shs.hl.ui.contentassist;

import java.util.StringTokenizer;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;
import com.shs.common.commonLanguage.CommonLanguagePackage;
import com.shs.common.od.CommonResourceDescriptionStrategy;
import com.shs.hl.hearingLanguage.HearingLanguagePackage;




/**
 * A couple of CodeCompletion locations had to be manually tweaked, standard
 * scoping-derived CC did not work.
 */

public class HearingLanguageProposalProvider extends
		AbstractHearingLanguageProposalProvider {

	private static final int				LOOKUP_LENGTH	= 50;

	@Inject
	private IResourceDescriptions			descs;

	private final HearingLanguagePackage	hl				= HearingLanguagePackage.eINSTANCE;
	private final CommonLanguagePackage		cl				= CommonLanguagePackage.eINSTANCE;

	@Inject
	private IScopeProvider					sp;

	/**
	 * This one shows all namespaces "in the world" when code-completing the
	 * using statement
	 */
	@Override
	public void completeUsing_ImportedNamespace(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
		// grab all resource descriptions from the index
		final Iterable<IResourceDescription> allResourceDescriptions = descs.getAllResourceDescriptions();
		for (final IResourceDescription d : allResourceDescriptions) {
			// grab all namespaces in each resource
			final Iterable<IEObjectDescription> namespaces = d.getExportedObjectsByType(hl.getNamespace());
			for (final IEObjectDescription n : namespaces) {
				// ... and create a proposal for each
				acceptor.accept(createCompletionProposal(n.getQualifiedName().toString(), context));
			}
		}
	}

	/**
	 * Here we customize the assignment statement if and when a
	 * ParameterReadExpression in various cases.
	 */
	@Override
	public void completeAssignment(final Assignment assignment, final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor) {
		try {
			// we first find out where in the text buffer (the overall document)
			// we are
			final int o = contentAssistContext.getOffset();
			// and then we get the 30 characters before the current location
			final String scopeToken = contentAssistContext.getDocument().get(o - LOOKUP_LENGTH, LOOKUP_LENGTH).trim();

			if (scopeToken.endsWith("->")) {
				// EObject currentModel =
				// contentAssistContext.getCurrentModel();
				// IScope s = sp.getScope(currentModel,
				// hl.getBuiltInCall_BuiltIn());
				// for (IEObjectDescription ieod : s.getAllContents()) {
				// System.err.println(ieod.getName());
				// }
				super.completeAssignment(assignment, contentAssistContext, acceptor);
				return;
			}

			// we have to handle any case where we are behind a : and also
			// when we are on the right side of an assigment (=)

			final int colonIndex = scopeToken.lastIndexOf(":");
			// int equalsIndex = scopeToken.indexOf("=", colonIndex);
			final int equalsIndex = operatorPosition(scopeToken, colonIndex);

			// if we find a : and =, and the = is on the right side of the : as
			// in
			// hi:xyz = <we are here>, then
			if (equalsIndex >= 0 && colonIndex >= 0 && equalsIndex > colonIndex) {
				final String text = contentAssistContext.getDocument().get(o - 50, 50).trim();
				// extract the name of the parameter
				final int cp = text.lastIndexOf(":");
				final int ep = operatorPosition(text, cp);
				String pn = text.substring(cp + 1, ep).trim();
				final int bracketIndex = pn.indexOf("[");
				if (bracketIndex >= 0) {
					pn = pn.substring(0, bracketIndex);
				}

				// iterate over all resources, as usual
				final Iterable<IResourceDescription> allResourceDescriptions = descs.getAllResourceDescriptions();

				for (final IResourceDescription d : allResourceDescriptions) {
					final Iterable<IEObjectDescription> enumparams = d.getExportedObjectsByType(cl.getEnumParameter());
					final String values = GetObjectDescriptionContentByName(pn, enumparams, CommonResourceDescriptionStrategy.KEY_LITERALS);

					if (values == null || values == "") {

					}

					if (values == null || values == "") continue;

					final StringTokenizer st = new StringTokenizer(values, " ");
					while (st.hasMoreTokens()) {
						final String l = pn + "." + st.nextToken();
						// create a proposal for each data element
						acceptor.accept(createCompletionProposal(l, contentAssistContext));
					}

					return;
				}
				return;
			}

			if (colonIndex >= 0) {
				String searchFor = null;
				// if we don't have an equals, but still a colon, then extract
				// the scope and provide the proposals
				// scopeToken = scopeToken.substring(0,scopeToken.length()-1);
				// it is easier to just check for the specific tokens than to
				// try to detect any kind of whitespace
				if (scopeToken.contains("hi:")) {
					searchFor = "hi";
				}
				if (scopeToken.contains("env:")) {
					searchFor = "env";
				}
				if (scopeToken.contains("pat:")) {
					searchFor = "pat";
				}
				if (scopeToken.contains("fit:")) {
					searchFor = "fit";
				}
				if (scopeToken.contains("crv:")) {
					searchFor = "crv";
				}
				if (scopeToken.contains("levelcrv:")) {
					searchFor = "levelcrv";
				}
				if (scopeToken.contains("cap:")) {
					searchFor = "cap";
				}
				if (scopeToken.contains("std:")) {
					searchFor = "std";
				}

				if (scopeToken.contains("plf:")) {
					searchFor = "plf";
				}
				
				if (searchFor != null && searchFor != "") {
					createProposalsForScope(contentAssistContext, acceptor, searchFor);
				}
				return;
			}

			super.completeAssignment(assignment, contentAssistContext, acceptor);

		} catch (final BadLocationException ignore) {
		}
	}

	private String GetObjectDescriptionContentByName(final String searchKey, final Iterable<IEObjectDescription> searchList, final String searchKeyData) {
		if (searchKey == null) return null;
		if (searchList == null) return null;
		if (searchKeyData == null) return null;

		for (final IEObjectDescription od : searchList) {
			final QualifiedName objectName = od.getName(); // for debugging
															// purpose I split
															// up this line
			// if it is the param for which we want the literals
			if (objectName.toString().equalsIgnoreCase(searchKey)) {
				return od.getUserData(searchKeyData);
			}
		}

		return null;
	}

	private int operatorPosition(final String text, final int startAt) {
		int p = 0;
		p = text.indexOf("!=", startAt);
		if (p >= 0) return p;
		p = text.indexOf(">=", startAt);
		if (p >= 0) return p;
		p = text.indexOf("<=", startAt);
		if (p >= 0) return p;
		p = text.indexOf(">", startAt);
		if (p >= 0) return p;
		p = text.indexOf("<", startAt);
		if (p >= 0) return p;
		p = text.indexOf("==", startAt);
		if (p >= 0) return p;
		p = text.indexOf("=", startAt);
		if (p >= 0) return p;
		return -1;
	}

	/**
	 * creates proposals for all parameters with a specific scope (scopeToken)
	 */
	private void createProposalsForScope(final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor, final String scopeToken) {
		final Iterable<IResourceDescription> allResourceDescriptions = descs.getAllResourceDescriptions();
		for (final IResourceDescription d : allResourceDescriptions) {
			final Iterable<IEObjectDescription> channelParams = d.getExportedObjectsByType(cl.getChannelParameter());
			addParams(contentAssistContext, acceptor, scopeToken, channelParams);

			final Iterable<IEObjectDescription> enumparams = d.getExportedObjectsByType(cl.getEnumParameter());
			addParams(contentAssistContext, acceptor, scopeToken, enumparams);

			final Iterable<IEObjectDescription> intparams = d.getExportedObjectsByType(cl.getIntegerParameter());
			addParams(contentAssistContext, acceptor, scopeToken, intparams);

			final Iterable<IEObjectDescription> crvparams = d.getExportedObjectsByType(cl.getCrvParameter());
			addParams(contentAssistContext, acceptor, scopeToken, crvparams);
		}
	}

	private void addParams(final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor, final String scopeToken, final Iterable<IEObjectDescription> params) {
		for (final IEObjectDescription n : params) {
			if (scopeToken.equals(n.getUserData(CommonResourceDescriptionStrategy.KEY_SCOPE))) {
				acceptor.accept(createCompletionProposal(n.getQualifiedName().toString(), contentAssistContext));
			}
		}
	}

}
